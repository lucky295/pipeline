/*
 * -------------------------------------------------
 *  nf-core/rnaseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Pipeline Options
  project = false
  contaminant_software = 'bbmap' // facs, bbmap
  adapter_software = 'bbmap' // bbmap, fastp
  forward_stranded = false
  reverse_stranded = false
  unstranded = false
  singleEnd = false
  reads = "data/*{1,2}.fastq.gz"
  contaminant_fasta = "data/contaminant_fa"
  contaminant_bloomfacs = "data/contaminant.bloomfacs" // only needed if contaminant_software is facs
  salmon_index_path = "/data/salmon_index" // needs to be a directory
  tx2gene_file = "/data/tx2gene_file" // needs to be a 2 column tx2gene file
  quant_method = 'salmon' // salmon, salmon-sa
  outdir = './results'
  seqCenter = false
  skip_qc = false
  skip_fastqc = false
  skip_multiqc = false

  // Defaults
  maxMultiqcEmailFileSize = 25.MB
  readPaths = null

  // Boilerplate options
  name = false
  multiqc_config = "$baseDir/assets/multiqc_config.yaml"
  email = false
  plaintext_email = false
  monochrome_logs = false
  help = false
  tracedir = "${params.outdir}/pipeline_info"
  awsqueue = false
  awsregion = 'us-east-1'
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = '947682355454.dkr.ecr.us-east-1.amazonaws.com/nfs:latest'


// Load base.config by default for all pipelines
includeConfig 'conf/base.config'


profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  docker { docker.enabled = true }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.png"
}

manifest {
  name = 'SCAPE-pipeline'
  author = 'asrini, anandv'
  homePage = 'https://dsigitlab.research.auto.pioneer.com/CINFRA/project-infastructure/nfs-infrastructure/tree/sb/scape_pipeline'
  description = 'Nextflow SCAPE pipeline, part of the CGBS in DSI community.'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.3'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
